import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))
import telebot
from admin_bot import *
import config
from database.crud import *
import os
import subprocess
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import json
import task_work
import random

subprocess.run(["python", "database/models.py"]) if "DataBase" in os.listdir("data") else ...
tasks_ids = json.load(open("data/tasks.json", "r"))["tasks"]
count = int((len(tasks_ids))/5)
bot = telebot.TeleBot(config.TOKEN)

@bot.message_handler(commands=['start'])
def start(message):
    if add_user(user_id=message.chat.username.lower(), admin=True if message.chat.username.lower() == "jamshed1737377" else False) == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç":
        if is_admin(message.chat.username.lower()):
            admin_panel(bot, message)
        else:
            user_panel(message)
    else:
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ—Å–Ω–æ–≤—ã JS –∏ —Å–º–æ–∂–µ—Ç –¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å —Å–æ–≤—Å–µ–º –≤—Å—ë. –°–≤–æ–µ–≥–æ —Ä–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è CodeWars –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.")
        user_panel(message)

def user_panel(message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = KeyboardButton("–ò–Ω—Å—Ç—É–∫—Ü–∏—è")
    btn2 = KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∞—Å–∫—É")
    btn3 = KeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è —Ç–∞—Å–∫–∞")
    btn4 = KeyboardButton("–†–µ—à—ë–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏")
    keyboard.add(btn1, btn2).row(btn3, btn4)
    bot.send_message(message.chat.id, text="–ß—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?", reply_markup=keyboard)

@bot.message_handler(func=lambda m: m.text == "–ò–Ω—Å—Ç—É–∫—Ü–∏—è")
def info(message):
    bot.send_message(message.chat.id, text= """
–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ JavaScript, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤—ã. –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ:

*üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
- */start* - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
- *–í—ã–±—Ä–∞—Ç—å —Ç–∞—Å–∫—É* - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
- *–°–ª—É—á–∞–π–Ω–∞—è —Ç–∞—Å–∫–∞* - –†–∞–Ω–¥–æ–º–Ω–∞—è –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
- *–†–µ—à—ë–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏* - –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

*üîß –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏:*
1. –í—ã–±–∏—Ä–∞–µ—à—å –∑–∞–¥–∞—á—É (–∏–ª–∏ –ø–æ–ª—É—á–∞–µ—à—å —Å–ª—É—á–∞–π–Ω—É—é)
2. –ß–∏—Ç–∞–µ—à—å —É—Å–ª–æ–≤–∏–µ –∏ *–ø–∏—à–µ—à—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç*
3. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ –≥–æ–≤–æ—Ä–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
4. –ï—Å–ª–∏ –æ—à–∏–±—Å—è - –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞

*üí° –§–∏—à–∫–∏:*
- –ó–∞–¥–∞—á–∏ —Ä–∞–∑–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–æ—Ç `–ª—ë–≥–∫–∏—Ö` –¥–æ `—Ö–∞—Ä–¥–∫–æ—Ä–Ω—ã—Ö`)
- –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É –∑–∞–¥–∞—á–∞–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
- –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è (–≤–∏–¥–Ω–æ –ø–æ –≥–∞–ª–æ—á–∫–∞–º ‚úÖ)

*‚ö†Ô∏è –í–∞–∂–Ω–æ:*
- –ü–∏—à–∏ –∫–æ–¥ *—Ç–æ—á–Ω–æ* –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—é–±—ã–µ JS-–º–µ—Ç–æ–¥—ã
- –ï—Å–ª–∏ –∑–∞—Å—Ç—Ä—è–ª - –∂–º–∏ "‚Üê –ù–∞–∑–∞–¥" –∏ –Ω–∞—á–∏–Ω–∞–π –∑–∞–Ω–æ–≤–æ

–ü–æ–µ—Ö–∞–ª–∏? –ñ–º–∏ *"–°–ª—É—á–∞–π–Ω–∞—è —Ç–∞—Å–∫–∞"* –∏–ª–∏ –≤—ã–±–∏—Ä–∞–π –∏–∑ —Å–ø–∏—Å–∫–∞!

*P.S.* –ï—Å–ª–∏ –Ω–∞–π–¥—ë—à—å –±–∞–≥–∏ - –ø–∏—à–∏ @jamshed17, –∏—Å–ø—Ä–∞–≤–ª—é
""", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Å–∫—É")
def tasks(message):
    global count
    page = user_page_number(message.chat.username)
    markup = InlineKeyboardMarkup()
    for task_id in range(page*5-4, (page*5)+1):
        markup.add(InlineKeyboardButton(text=f"{"‚úÖ " if is_complite(message.chat.username, task_id) else ""}{task_id} - {tasks_ids[task_id-1]["name"]} ({tasks_ids[task_id-1]["level"]})", callback_data=f"task-n=={task_id}"))
    if page == 1:
        markup.add(InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data=f'next-page'))
    elif page == count:
        markup.add(InlineKeyboardButton(text=f'‚Üê –ù–∞–∑–∞–¥', callback_data=f'back-page'),InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '))
    else:
        markup.add(InlineKeyboardButton(text=f'‚Üê –ù–∞–∑–∞–¥', callback_data=f'back-page'),InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data=f'next-page'))

    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É", reply_markup=markup)

def task_print(message, task_id: int, skript: str):
    bot.clear_step_handler(message)
    this_task = task_work.task_info(task_id)
    markup = InlineKeyboardMarkup()
    if skript == "random":
        markup.add(InlineKeyboardButton("‚Üª –î—Ä—É–≥–∞—è", callback_data="another-random-task"), InlineKeyboardButton("GO!", callback_data=f"task-go=={task_id}"))
    elif skript == "back":
        markup.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="to-page"), InlineKeyboardButton("GO!", callback_data=f"task-go=={task_id}"))
    bot.send_message(message.chat.id, text=this_task[0], reply_markup=markup, parse_mode="Markdown")

def task_try(message, task_id: int):
    this_task = task_work.task_info(task_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="to-page"))
    bot.send_message(message.chat.id, text=f"{this_task[0]}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —á–∞—Ç", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, lambda msg: testing_tasks(msg, task_id))

def testing_tasks(message, task_id: int):
    if message.text.lower() in ["/start", "–æ—Ç–º–µ–Ω–∞", "–Ω–∞–∑–∞–¥"]:
        user_panel(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        return
    if hasattr(message, 'data') and message.data == "to-page":
        return
    request_try = task_work.task_trying(task_id, message.text, message.chat.username)
    if type(request_try) == str:
        bot.send_message(message.chat.id, text=f"–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:\n{request_try}")
        task_try(message, task_id)
    else:
        bot.send_message(message.chat.id, text=f"–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–π–¥–µ–Ω–æ!")
        start(message)

@bot.message_handler(func=lambda m: m.text == "–°–ª—É—á–∞–π–Ω–∞—è —Ç–∞—Å–∫–∞")
def random_task(message):
    username = message.chat.username
    total_tasks = len(tasks_ids)
    completed_tasks = {str(t) for t in complites_use(username)}
    available_tasks = [t for t in range(1, total_tasks + 1) if str(t) not in completed_tasks]
    
    if not available_tasks:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ —Ä–µ—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏!")
        return

    task_id = available_tasks[random.randint(0, len(available_tasks) - 1)]  # –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º random.choice()
    task_print(message, task_id, "random")


@bot.message_handler(func=lambda m: m.text == "–†–µ—à—ë–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏")
def my_complite_tasks(message):
    bot.send_message(message.chat.id, text=task_work.complite_tasks(message.chat.username), parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call:True)
def callback_query(call):
    page = user_page_number(call.message.chat.username)
    req = call.data.split('_')
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ - —Å–∫—Ä—ã—Ç—å
    if "task-n==" in req[0]:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        task_print(message=call.message, task_id=int(req[0].replace("task-n==", "")), skript="back")

    elif "task-go==" in req[0]:
        bot.delete_message(call.message.chat.id, call.message.message_id)
        task_try(call.message, task_id=int(req[0].replace("task-go==", "")))

    elif req[0] == "to-page":
        bot.clear_step_handler_by_chat_id(call.message.chat.id)
        page = user_page_number(call.message.chat.username)
        markup = InlineKeyboardMarkup()
        for task_id in range(page*5-4, (page*5)+1):
            markup.add(InlineKeyboardButton(text=f"{"‚úÖ " if is_complite(call.message.chat.username, task_id) else ""}{task_id} - {tasks_ids[task_id-1]["name"]} ({tasks_ids[task_id-1]["level"]})", callback_data=f"task-n=={task_id}"))
        if page == 1:
            markup.add(InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                    InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data=f'next-page'))
        elif page == count:
            markup.add(InlineKeyboardButton(text=f'‚Üê –ù–∞–∑–∞–¥', callback_data=f'back-page'),InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '))
        else:
            markup.add(InlineKeyboardButton(text=f'‚Üê –ù–∞–∑–∞–¥', callback_data=f'back-page'),InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                    InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data=f'next-page'))
        bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É', reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
        
    elif req[0] == 'next-page':
        if page < count and page != count-1:
            page = next_page(call.message.chat.username)
            markup = InlineKeyboardMarkup()
            for task_id in range(page*5-4, (page*5)+1):
                markup.add(InlineKeyboardButton(text=f"{"‚úÖ " if is_complite(call.message.chat.username, task_id) else ""}{task_id} - {tasks_ids[task_id-1]["name"]} ({tasks_ids[task_id-1]["level"]})", callback_data=f"task-n=={task_id}"))
            markup.add(InlineKeyboardButton(text=f'‚Üê –ù–∞–∑–∞–¥', callback_data=f'back-page'),InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                    InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data=f'next-page'))
            bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É', reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
        elif page == count-1:
            page = next_page(call.message.chat.username)
            markup = InlineKeyboardMarkup()
            for task_id in range(page*5-4, (page*5)+1):
                markup.add(InlineKeyboardButton(text=f"{"‚úÖ " if is_complite(call.message.chat.username, task_id) else ""}{task_id} - {tasks_ids[task_id-1]["name"]} ({tasks_ids[task_id-1]["level"]})", callback_data=f"task-n=={task_id}"))
            markup.add(InlineKeyboardButton(text=f'‚Üê –ù–∞–∑–∞–¥', callback_data=f'back-page'),InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '))
            bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É', reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif req[0] == 'back-page':
        if page > 2:
            page = pre_page(call.message.chat.username)
            markup = InlineKeyboardMarkup()
            for task_id in range(page*5-4, (page*5)+1):
                markup.add(InlineKeyboardButton(text=f"{"‚úÖ " if is_complite(call.message.chat.username, task_id) else ""}{task_id} - {tasks_ids[task_id-1]["name"]} ({tasks_ids[task_id-1]["level"]})", callback_data=f"task-n=={task_id}"))
            markup.add(InlineKeyboardButton(text=f'‚Üê –ù–∞–∑–∞–¥', callback_data=f'back-page'),InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                    InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data=f'next-page'))
            bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É', reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)
        elif page == 2:
            page = pre_page(call.message.chat.username)
            markup = InlineKeyboardMarkup()
            for task_id in range(page*5-4, (page*5)+1):
                markup.add(InlineKeyboardButton(text=f"{"‚úÖ " if is_complite(call.message.chat.username, task_id) else ""}{task_id} - {tasks_ids[task_id-1]["name"]} ({tasks_ids[task_id-1]["level"]})", callback_data=f"task-n=={task_id}"))
            markup.add(InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                    InlineKeyboardButton(text=f'–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data=f'next-page'))
            bot.edit_message_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É', reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif req[0] == "another-random-task":
        random_task(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)


bot.infinity_polling()