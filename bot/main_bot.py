# -*- coding: utf-8 -*-
import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

import telebot
from admin_bot import *
import config
from database.crud import *
import os
import subprocess
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import json
import task_work
import random

# –ê–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã
subprocess.run(["python", "database/models.py"]) if "DataBase" in os.listdir("data") else ...

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
tasks_ids = json.load(open(config.TASKS_PATH, "r"))["tasks"]
count = int((len(tasks_ids)) / 5)

bot = telebot.TeleBot(config.TOKEN)

def generate_tasks_markup(username, page):
    markup = InlineKeyboardMarkup()
    for task_id in range(page * 5 - 4, page * 5 + 1):
        if task_id > len(tasks_ids):
            continue
        task = tasks_ids[task_id - 1]
        status = "‚úÖ" if is_complite(username, task_id) else ""
        text = f"{status}{task_id} - {task['name']} ({task['level']})"
        markup.add(InlineKeyboardButton(text=text, callback_data=f"task-n=={task_id}"))

    if page == 1:
        markup.add(
            InlineKeyboardButton(text=f'{page}/{count}', callback_data=' '),
            InlineKeyboardButton(text='–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data='next-page')
        )
    elif page == count:
        markup.add(
            InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='back-page'),
            InlineKeyboardButton(text=f'{page}/{count}', callback_data=' ')
        )
    else:
        markup.add(
            InlineKeyboardButton(text='‚Üê –ù–∞–∑–∞–¥', callback_data='back-page'),
            InlineKeyboardButton(text=f'{page}/{count}', callback_data=' '),
            InlineKeyboardButton(text='–í–ø–µ—Ä—ë–¥ ‚Üí', callback_data='next-page')
        )
    return markup

@bot.message_handler(commands=['start'])
def start(message):
    username = message.chat.username.lower()
    if add_user(user_id=username, admin=(username == "jamshed1737377")) == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç":
        if is_admin(username):
            admin_panel(bot, message)
        else:
            user_panel(message)
    else:
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ—Å–Ω–æ–≤—ã JS –∏ —Å–º–æ–∂–µ—Ç –¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –ø—Ä–∞–∫—Ç–∏–∫—É, —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å —Å–æ–≤—Å–µ–º –≤—Å—ë. –°–≤–æ–µ–≥–æ —Ä–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è CodeWars –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ.")
        user_panel(message)

def user_panel(message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = KeyboardButton("–ò–Ω—Å—Ç—É–∫—Ü–∏—è")
    btn2 = KeyboardButton("–í—ã–±—Ä–∞—Ç—å —Ç–∞—Å–∫—É")
    btn3 = KeyboardButton("–°–ª—É—á–∞–π–Ω–∞—è —Ç–∞—Å–∫–∞")
    btn4 = KeyboardButton("–†–µ—à—ë–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏")
    keyboard.add(btn1, btn2).row(btn3, btn4)
    bot.send_message(message.chat.id, text="–ß—Ç–æ –¥–µ–ª–∞—Ç—å –±—É–¥–µ–º?", reply_markup=keyboard)

@bot.message_handler(func=lambda m: m.text == "–ò–Ω—Å—Ç—É–∫—Ü–∏—è")
def info(message):
    bot.send_message(message.chat.id, text="""
–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –º–∏–Ω–∏-—Ç—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ JavaScript, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤—ã. –†–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ:

üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- /start ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
- "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Å–∫—É" ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
- "–°–ª—É—á–∞–π–Ω–∞—è —Ç–∞—Å–∫–∞" ‚Äî —Ä–∞–Ω–¥–æ–º–Ω–∞—è –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω–∞—è
- "–†–µ—à—ë–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏" ‚Äî –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è

üîß –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å:
1. –í—ã–±–∏—Ä–∞–µ—à—å –∑–∞–¥–∞—á—É
2. –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å JS-–∫–æ–¥ –ø—Ä—è–º–æ –≤ —á–∞—Ç
3. –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ—à–µ–Ω–∏–µ

üí° –§–∏—à–∫–∏:
- –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è
- –†–∞–Ω–¥–æ–º –∏ –∫–Ω–æ–ø–∫–∏ —É–¥–æ–±—Å—Ç–≤–∞

‚ö†Ô∏è –í–∞–∂–Ω–æ:
- –ü–∏—à–∏ –∫–æ–¥ *—Ç–æ—á–Ω–æ* –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö
- –†–µ—à–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏

P.S. –ù–∞—à—ë–ª –±–∞–≥? –ü–∏—à–∏ @jamshed17
""", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "–í—ã–±—Ä–∞—Ç—å —Ç–∞—Å–∫—É")
def tasks(message):
    page = user_page_number(message.chat.username)
    markup = generate_tasks_markup(message.chat.username, page)
    bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É", reply_markup=markup)

def task_print(message, task_id: int, skript: str = "back"):
    bot.clear_step_handler(message)
    this_task = task_work.task_info(task_id)
    markup = InlineKeyboardMarkup()
    if skript == "random":
        markup.add(
            InlineKeyboardButton("‚Üª –î—Ä—É–≥–∞—è", callback_data="another-random-task"),
            InlineKeyboardButton("GO!", callback_data=f"task-go=={task_id}")
        )
    elif skript == "back":
        markup.add(
            InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="to-page"),
            InlineKeyboardButton("GO!", callback_data=f"task-go=={task_id}")
        )
    bot.send_message(message.chat.id, text=this_task[0], reply_markup=markup, parse_mode="Markdown")

def task_try(message, task_id: int):
    this_task = task_work.task_info(task_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="to-page"))
    bot.send_message(message.chat.id, text=f"{this_task[0]}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –≤ —á–∞—Ç", reply_markup=markup, parse_mode="Markdown")
    bot.register_next_step_handler(message, lambda msg: testing_tasks(msg, task_id))

def testing_tasks(message, task_id: int):
    if message.text.lower() in ["/start", "–æ—Ç–º–µ–Ω–∞", "–Ω–∞–∑–∞–¥"]:
        user_panel(message)
        return
    request_try = task_work.task_trying(task_id, message.text, message.chat.username)
    if isinstance(request_try, str):
        bot.send_message(message.chat.id, text=f"–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:\n{request_try}")
        task_try(message, task_id)
    else:
        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–æ!")
        start(message)

@bot.message_handler(func=lambda m: m.text == "–°–ª—É—á–∞–π–Ω–∞—è —Ç–∞—Å–∫–∞")
def random_task(message):
    username = message.chat.username
    total_tasks = len(tasks_ids)
    completed = set(map(str, complites_use(username)))
    available = [t for t in range(1, total_tasks + 1) if str(t) not in completed]

    if not available:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ —Ä–µ—à–∏–ª–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏!")
        return

    task_id = random.choice(available)
    task_print(message, task_id, "random")

@bot.message_handler(func=lambda m: m.text == "–†–µ—à—ë–Ω–Ω—ã–µ —Ç–∞—Å–∫–∏")
def my_complite_tasks(message):
    bot.send_message(message.chat.id, text=task_work.complite_tasks(message.chat.username), parse_mode="Markdown")

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    username = call.message.chat.username
    page = user_page_number(username)
    data = call.data

    if data.startswith("task-n=="):
        task_id = int(data.split("==")[1])
        bot.delete_message(call.message.chat.id, call.message.message_id)
        task_print(call.message, task_id, "back")

    elif data.startswith("task-go=="):
        task_id = int(data.split("==")[1])
        bot.delete_message(call.message.chat.id, call.message.message_id)
        task_try(call.message, task_id)

    elif data == "to-page":
        markup = generate_tasks_markup(username, page)
        bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

    elif data == "next-page":
        if page < count:
            next_page(username)
            page = user_page_number(username)
            markup = generate_tasks_markup(username, page)
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

    elif data == "back-page":
        if page > 1:
            pre_page(username)
            page = user_page_number(username)
            markup = generate_tasks_markup(username, page)
            bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Å–∫—É", chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=markup)

    elif data == "another-random-task":
        random_task(call.message)
        bot.delete_message(call.message.chat.id, call.message.message_id)

bot.infinity_polling()
